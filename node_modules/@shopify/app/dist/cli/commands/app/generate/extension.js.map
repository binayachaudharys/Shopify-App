{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../../src/cli/commands/app/generate/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {appFlags} from '../../../flags.js'\nimport generateExtensionPrompt from '../../../prompts/generate/extension.js'\nimport {AppInterface} from '../../../models/app/app.js'\nimport {load as loadApp} from '../../../models/app/loader.js'\nimport generateExtensionService, {ExtensionFlavor} from '../../../services/generate/extension.js'\nimport metadata from '../../../metadata.js'\nimport Command from '../../../utilities/app-command.js'\nimport {ensureGenerateEnvironment} from '../../../services/environment.js'\nimport {fetchExtensionSpecifications} from '../../../utilities/extensions/fetch-extension-specifications.js'\nimport {allFunctionSpecifications} from '../../../models/extensions/specifications.js'\nimport {GenericSpecification} from '../../../models/app/extensions.js'\nimport {output, path, cli, error, environment, session} from '@shopify/cli-kit'\nimport {Flags} from '@oclif/core'\nimport {PackageManager} from '@shopify/cli-kit/node/node-package-manager'\n\nexport default class AppGenerateExtension extends Command {\n  static description = 'Scaffold an Extension'\n  static examples = ['<%= config.bin %> <%= command.id %>']\n\n  static flags = {\n    ...cli.globalFlags,\n    ...appFlags,\n    type: Flags.string({\n      char: 't',\n      hidden: false,\n      description: `Extension type`,\n      env: 'SHOPIFY_FLAG_EXTENSION_TYPE',\n    }),\n    name: Flags.string({\n      char: 'n',\n      hidden: false,\n      description: 'name of your Extension',\n      env: 'SHOPIFY_FLAG_NAME',\n    }),\n    'clone-url': Flags.string({\n      hidden: true,\n      char: 'u',\n      description:\n        'The Git URL to clone the function extensions templates from. Defaults to: https://github.com/Shopify/function-examples',\n      env: 'SHOPIFY_FLAG_CLONE_URL',\n    }),\n    template: Flags.string({\n      hidden: false,\n      description: 'Choose a starting template for your extension, where applicable',\n      options: ['vanilla-js', 'react', 'typescript', 'typescript-react', 'wasm', 'rust'],\n      env: 'SHOPIFY_FLAG_TEMPLATE',\n    }),\n    reset: Flags.boolean({\n      hidden: false,\n      description: 'Reset all your settings.',\n      env: 'SHOPIFY_FLAG_RESET',\n      default: false,\n    }),\n    'api-key': Flags.string({\n      hidden: false,\n      description: 'The API key of your app.',\n      env: 'SHOPIFY_FLAG_APP_API_KEY',\n    }),\n  }\n\n  static args = [{name: 'file'}]\n\n  public static analyticsNameOverride(): string | undefined {\n    return 'app scaffold extension'\n  }\n\n  public async run(): Promise<void> {\n    const {flags} = await this.parse(AppGenerateExtension)\n\n    await metadata.addPublic(() => ({\n      cmd_scaffold_required_auth: true,\n      cmd_scaffold_template_custom: flags['clone-url'] !== undefined,\n      cmd_scaffold_type_owner: '@shopify/app',\n    }))\n\n    const directory = flags.path ? path.resolve(flags.path) : process.cwd()\n\n    const isShopify = await environment.local.isShopify()\n    const token = await session.ensureAuthenticatedPartners()\n    const apiKey = await ensureGenerateEnvironment({apiKey: flags['api-key'], directory, reset: flags.reset, token})\n    const extensionsSpecs = await fetchExtensionSpecifications(token, apiKey)\n    const functionSpecs = await (await allFunctionSpecifications()).filter((spec) => !spec.gated || isShopify)\n    let allExtensionSpecs: GenericSpecification[] = [...extensionsSpecs, ...functionSpecs]\n\n    // Pending: use specs to load local extensions\n    const app: AppInterface = await loadApp(directory)\n    const specification = this.findSpecification(flags.type, allExtensionSpecs)\n    const allExternalTypes = allExtensionSpecs.map((spec) => spec.externalIdentifier)\n\n    if (flags.type && !specification) {\n      throw new error.Abort(`The following extension types are supported: ${allExternalTypes.join(', ')}`)\n    }\n\n    // Map to always use the internal type from now on\n    flags.type = specification?.identifier || flags.type\n\n    if (specification) {\n      const existing = app.extensionsForType(specification)\n      const limit = specification.registrationLimit\n      if (existing.length >= limit) {\n        throw new error.Abort(\n          'Invalid extension type',\n          `You can only generate ${limit} extension(s) of type ${specification.externalIdentifier} per app`,\n        )\n      }\n    } else {\n      allExtensionSpecs = allExtensionSpecs.filter((spec) => {\n        const existing = app.extensionsForType(spec)\n        output.debug(`${existing.length}: ${spec.externalIdentifier}`)\n        return existing.length < spec.registrationLimit\n      })\n    }\n\n    this.validateExtensionFlavor(specification, flags.template)\n\n    const promptAnswers = await generateExtensionPrompt({\n      extensionType: flags.type,\n      name: flags.name,\n      extensionFlavor: flags.template,\n      directory: path.join(directory, 'extensions'),\n      app,\n      extensionSpecifications: allExtensionSpecs,\n      reset: flags.reset,\n    })\n\n    const {extensionType, extensionFlavor, name} = promptAnswers\n    const selectedSpecification = this.findSpecification(extensionType, allExtensionSpecs)\n    if (!selectedSpecification)\n      throw new error.Abort(`The following extension types are supported: ${allExternalTypes.join(', ')}`)\n\n    await metadata.addPublic(() => ({\n      cmd_scaffold_template_flavor: extensionFlavor,\n      cmd_scaffold_type: extensionType,\n      cmd_scaffold_type_category: selectedSpecification.category(),\n      cmd_scaffold_type_gated: selectedSpecification.gated,\n      cmd_scaffold_used_prompts_for_type: extensionType !== flags.type,\n    }))\n\n    const extensionDirectory = await generateExtensionService({\n      name,\n      extensionFlavor: extensionFlavor as ExtensionFlavor,\n      specification: selectedSpecification,\n      app,\n      extensionType: selectedSpecification.identifier,\n      cloneUrl: flags['clone-url'],\n    })\n\n    const formattedSuccessfulMessage = this.formatSuccessfulRunMessage(\n      selectedSpecification,\n      path.relative(app.directory, extensionDirectory),\n      app.packageManager,\n    )\n    output.info(formattedSuccessfulMessage)\n  }\n\n  findSpecification(type: string | undefined, specifications: GenericSpecification[]) {\n    return specifications.find((spec) => spec.identifier === type || spec.externalIdentifier === type)\n  }\n\n  validateExtensionFlavor(specification: GenericSpecification | undefined, flavor: string | undefined) {\n    if (!flavor || !specification) return\n\n    const possibleFlavors = specification.supportedFlavors.map((flavor) => flavor.name)\n    if (possibleFlavors.includes(flavor)) {\n      throw new error.Abort(\n        'Specified extension template on invalid extension type',\n        `You can only specify a template for these extension types: ${possibleFlavors.join(', ')}.`,\n      )\n    }\n  }\n\n  formatSuccessfulRunMessage(\n    specification: GenericSpecification,\n    extensionDirectory: string,\n    depndencyManager: PackageManager,\n  ): string {\n    output.completed(`Your ${specification.externalName} extension was added to your project!`)\n\n    const outputTokens = []\n    outputTokens.push(\n      output.content`\\n  To find your extension, remember to ${output.token.genericShellCommand(\n        output.content`cd ${output.token.path(extensionDirectory)}`,\n      )}`.value,\n    )\n\n    if (specification.category() === 'ui' || specification.category() === 'theme') {\n      outputTokens.push(\n        output.content`  To preview your project, run ${output.token.packagejsonScript(depndencyManager, 'dev')}`.value,\n      )\n    }\n\n    if (specification.helpURL) {\n      outputTokens.push(\n        output.content`  For more details, see the ${output.token.link('docs', specification.helpURL)} ✨`.value,\n      )\n    }\n\n    return outputTokens.join('\\n').concat('\\n')\n  }\n}\n"]}