import { BaseFunctionConfigurationSchema } from './schemas.js';
import { allFunctionSpecifications } from './specifications.js';
import { blocks, defaultFunctionsFlavors } from '../../constants.js';
import { path, error, system, string, environment } from '@shopify/cli-kit';
/**
 * Class that represents an instance of a local function
 * Before creating this class we've validated that:
 * - There is a spec for this type of function
 * - The Config Schema for that spec is followed by the function config toml file
 *
 * This class holds the public interface to interact with functions
 */
export class FunctionInstance {
    constructor(options) {
        this.configuration = options.configuration;
        this.configurationPath = options.configurationPath;
        this.specification = options.specification;
        this.directory = options.directory;
        this.localIdentifier = path.basename(options.directory);
        this.idEnvironmentVariableName = `SHOPIFY_${string.constantize(path.basename(this.directory))}_ID`;
    }
    get graphQLType() {
        return this.specification.identifier;
    }
    get identifier() {
        return this.specification.identifier;
    }
    get type() {
        return this.specification.identifier;
    }
    get externalType() {
        return this.specification.externalIdentifier;
    }
    get name() {
        return this.configuration.name;
    }
    inputQueryPath() {
        return path.join(this.directory, 'input.graphql');
    }
    buildWasmPath() {
        const relativePath = this.configuration.build.path ?? path.join('dist', 'index.wasm');
        return path.join(this.directory, relativePath);
    }
    async build(stdout, stderr, signal) {
        const buildCommand = this.configuration.build.command;
        if (!buildCommand || buildCommand.trim() === '') {
            stderr.write(`The function extension ${this.localIdentifier} doesn't have a build command or it's empty`);
            stderr.write(`
      Edit the shopify.function.extension.toml configuration file and set how to build the extension.

      [build]
      command = "{COMMAND}"

      Note that the command must output a dist/index.wasm file.
      `);
            throw new error.AbortSilent();
        }
        const buildCommandComponents = buildCommand.split(' ');
        stdout.write(`Building function ${this.localIdentifier}...`);
        await system.exec(buildCommandComponents[0], buildCommandComponents.slice(1), {
            stdout,
            stderr,
            cwd: this.directory,
            signal,
        });
    }
    async publishURL(options) {
        const partnersFqdn = await environment.fqdn.partners();
        return `https://${partnersFqdn}/${options.orgId}/apps/${options.appId}/extensions`;
    }
}
/**
 * Find the registered spec for a given function type
 */
export async function functionSpecForType(type) {
    return (await allFunctionSpecifications()).find((spec) => spec.identifier === type);
}
export function createFunctionSpec(spec) {
    const defaults = {
        templateURL: 'https://github.com/Shopify/function-examples',
        supportedFlavors: defaultFunctionsFlavors,
        configSchema: BaseFunctionConfigurationSchema,
        gated: false,
        registrationLimit: spec.registrationLimit ?? blocks.functions.defaultRegistrationLimit,
        category: () => 'function',
    };
    return { ...defaults, ...spec };
}
//# sourceMappingURL=functions.js.map