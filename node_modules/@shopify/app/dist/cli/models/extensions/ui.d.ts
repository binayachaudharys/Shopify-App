import { BaseConfigContents, ZodSchemaType } from './schemas.js';
import { ExtensionCategory, GenericSpecification, UIExtension } from '../app/extensions.js';
import { api, output } from '@shopify/cli-kit';
import { Result } from '@shopify/cli-kit/node/result';
/**
 * Extension specification with all the needed properties and methods to load an extension.
 */
export interface UIExtensionSpec<TConfiguration extends BaseConfigContents = BaseConfigContents> extends GenericSpecification {
    identifier: string;
    externalIdentifier: string;
    externalName: string;
    partnersWebIdentifier: string;
    surface: string;
    showInCLIHelp: boolean;
    singleEntryPath: boolean;
    registrationLimit: number;
    supportedFlavors: {
        name: string;
        value: string;
    }[];
    gated: boolean;
    helpURL?: string;
    dependency?: {
        name: string;
        version: string;
    };
    templatePath?: string;
    graphQLType?: string;
    schema: ZodSchemaType<TConfiguration>;
    getBundleExtensionStdinContent?: (config: TConfiguration) => string;
    deployConfig?: (config: TConfiguration, directory: string) => Promise<{
        [key: string]: unknown;
    }>;
    validate?: (config: TConfiguration, directory: string) => Promise<Result<unknown, string>>;
    preDeployValidation?: (config: TConfiguration) => Promise<void>;
    resourceUrl?: (config: TConfiguration) => string;
    category: () => ExtensionCategory;
    previewMessage?: (host: string, uuid: string, config: TConfiguration, storeFqdn: string) => output.TokenizedString | undefined;
    shouldFetchCartUrl?(config: TConfiguration): boolean;
    hasExtensionPointTarget?(config: TConfiguration, target: string): boolean;
}
/**
 * Class that represents an instance of a local extension
 * Before creating this class we've validated that:
 * - There is a spec for this type of extension
 * - The Schema for that spec is followed by the extension config toml file
 * - We were able to find an entry point file for that extension
 *
 * It supports extension points, making this Class compatible with both new ui-extension
 * and legacy extension types. Extension points are optional and this class will handle them if present.
 *
 * This class holds the public interface to interact with extensions
 */
export declare class UIExtensionInstance<TConfiguration extends BaseConfigContents = BaseConfigContents> implements UIExtension<TConfiguration> {
    entrySourceFilePath: string;
    outputBundlePath: string;
    devUUID: string;
    localIdentifier: string;
    idEnvironmentVariableName: string;
    directory: string;
    configuration: TConfiguration;
    configurationPath: string;
    private specification;
    private remoteSpecification?;
    get graphQLType(): string;
    get identifier(): string;
    get type(): string;
    get humanName(): string;
    get name(): string;
    get dependency(): {
        name: string;
        version: string;
    } | undefined;
    get externalType(): string;
    get surface(): string;
    constructor(options: {
        configuration: TConfiguration;
        configurationPath: string;
        entryPath: string;
        directory: string;
        specification: UIExtensionSpec;
        remoteSpecification?: api.graphql.RemoteSpecification;
    });
    deployConfig(): Promise<{
        [key: string]: unknown;
    }>;
    validate(): Promise<Result<unknown, string>>;
    preDeployValidation(): Promise<void>;
    publishURL(options: {
        orgId: string;
        appId: string;
        extensionId?: string;
    }): Promise<string>;
    previewMessage(url: string, storeFqdn: string): output.TokenizedString | undefined;
    getBundleExtensionStdinContent(): string;
    shouldFetchCartUrl(): boolean;
    hasExtensionPointTarget(target: string): boolean;
}
/**
 * Find the registered spececification for a given extension type
 */
export declare function uiSpecForType(type: string): Promise<UIExtensionSpec | undefined>;
export declare function createUIExtensionSpec<TConfiguration extends BaseConfigContents = BaseConfigContents>(spec: {
    identifier: string;
    externalIdentifier: string;
    partnersWebIdentifier: string;
    surface: string;
    externalName: string;
    helpURL?: string;
    supportedFlavors?: {
        name: string;
        value: string;
    }[];
    showInCLIHelp?: boolean;
    dependency?: {
        name: string;
        version: string;
    };
    templatePath?: string;
    graphQLType?: string;
    singleEntryPath?: boolean;
    schema: ZodSchemaType<TConfiguration>;
    getBundleExtensionStdinContent?: (config: TConfiguration) => string;
    validate?: (config: TConfiguration, directory: string) => Promise<Result<unknown, string>>;
    deployConfig?: (config: TConfiguration, directory: string) => Promise<{
        [key: string]: unknown;
    }>;
    preDeployValidation?: (config: TConfiguration) => Promise<void>;
    previewMessage?: (host: string, uuid: string, config: TConfiguration, storeFqdn: string) => output.TokenizedString | undefined;
    shouldFetchCartUrl?(config: TConfiguration): boolean;
    hasExtensionPointTarget?(config: TConfiguration, target: string): boolean;
}): UIExtensionSpec<TConfiguration>;
