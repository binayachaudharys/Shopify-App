{"version":3,"file":"fetch.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/fetch.ts"],"names":[],"mappings":"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","sourcesContent":["import {Organization, OrganizationApp, MinimalOrganizationApp, OrganizationStore} from '../../models/organization.js'\nimport {api, error} from '@shopify/cli-kit'\n\nexport const NoOrgError = (organizationId?: string) => {\n  const nextSteps = [\n    [\n      'Have you',\n      {\n        link: {\n          label: 'created a Shopify Partners organization',\n          url: 'https://partners.shopify.com/signup',\n        },\n      },\n      {\n        char: '?',\n      },\n    ],\n    'Have you confirmed your accounts from the emails you received?',\n    [\n      'Need to connect to a different App or organization? Run the command again with',\n      {\n        command: '--reset',\n      },\n    ],\n  ]\n\n  if (organizationId) {\n    nextSteps.push([\n      'Do you have access to the right Shopify Partners organization? The CLI is loading',\n      {link: {label: 'this organization', url: `https://partner.shopify.com/${organizationId}`}},\n    ])\n  }\n  // eslint-disable-next-line rulesdir/no-error-factory-functions\n  return new error.Abort(`No Organization found`, undefined, nextSteps)\n}\n\nexport interface FetchResponse {\n  organization: Organization\n  apps: MinimalOrganizationApp[]\n  stores: OrganizationStore[]\n}\n\nexport async function fetchAppExtensionRegistrations({\n  token,\n  apiKey,\n}: {\n  token: string\n  apiKey: string\n}): Promise<api.graphql.AllAppExtensionRegistrationsQuerySchema> {\n  const query = api.graphql.AllAppExtensionRegistrationsQuery\n  const result: api.graphql.AllAppExtensionRegistrationsQuerySchema = await api.partners.request(query, token, {\n    apiKey,\n  })\n  return result\n}\n\n/**\n * Fetch all organizations the user belongs to\n * If the user doesn't belong to any org, throw an error\n * @param token - Token to access partners API\n * @returns List of organizations\n */\nexport async function fetchOrganizations(token: string) {\n  const query = api.graphql.AllOrganizationsQuery\n  const result: api.graphql.AllOrganizationsQuerySchema = await api.partners.request(query, token)\n  const organizations = result.organizations.nodes\n  if (organizations.length === 0) throw NoOrgError()\n  return organizations\n}\n\n/**\n * Fetch all apps and stores for the given organization\n * @param orgId - Organization ID\n * @param token - Token to access partners API\n * @returns Current organization details and list of apps and stores\n */\nexport async function fetchOrgAndApps(orgId: string, token: string): Promise<FetchResponse> {\n  const query = api.graphql.FindOrganizationQuery\n  const result: api.graphql.FindOrganizationQuerySchema = await api.partners.request(query, token, {id: orgId})\n  const org = result.organizations.nodes[0]\n  if (!org) throw NoOrgError(orgId)\n  const parsedOrg = {id: org.id, businessName: org.businessName, appsNext: org.appsNext}\n  return {organization: parsedOrg, apps: org.apps.nodes, stores: []}\n}\n\nexport async function fetchAppFromApiKey(apiKey: string, token: string): Promise<OrganizationApp | undefined> {\n  const res: api.graphql.FindAppQuerySchema = await api.partners.request(api.graphql.FindAppQuery, token, {apiKey})\n  return res.app\n}\n\nexport async function fetchOrgFromId(id: string, token: string): Promise<Organization | undefined> {\n  const query = api.graphql.FindOrganizationBasicQuery\n  const res: api.graphql.FindOrganizationBasicQuerySchema = await api.partners.request(query, token, {id})\n  return res.organizations.nodes[0]\n}\n\nexport async function fetchAllDevStores(orgId: string, token: string): Promise<OrganizationStore[]> {\n  const query = api.graphql.AllDevStoresByOrganizationQuery\n  const result: api.graphql.AllDevStoresByOrganizationSchema = await api.partners.request(query, token, {id: orgId})\n  return result.organizations.nodes[0]!.stores.nodes\n}\n\ninterface FetchStoreByDomainOutput {\n  organization: Organization\n  store?: OrganizationStore\n}\n/**\n * Returns the organization and the store based on passed domain\n * If a store with that domain doesn't exist the method returns undefined\n * @param orgId - Organization ID\n * @param token - Token to access partners API\n * @param shopDomain - shop domain fqdn\n */\nexport async function fetchStoreByDomain(\n  orgId: string,\n  token: string,\n  shopDomain: string,\n): Promise<FetchStoreByDomainOutput | undefined> {\n  const query = api.graphql.FindStoreByDomainQuery\n  const result: api.graphql.FindStoreByDomainSchema = await api.partners.request(query, token, {\n    id: orgId,\n    shopDomain,\n  })\n  const org = result.organizations.nodes[0]\n  if (!org) {\n    return undefined\n  }\n\n  const parsedOrg = {id: org.id, businessName: org.businessName, appsNext: org.appsNext}\n  const store = org.stores.nodes[0]\n\n  return {organization: parsedOrg, store}\n}\n"]}