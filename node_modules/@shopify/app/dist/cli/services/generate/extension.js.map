{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/services/generate/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {blocks, versions} from '../../constants.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {FunctionSpec} from '../../models/extensions/functions.js'\nimport {GenericSpecification} from '../../models/app/extensions.js'\nimport {UIExtensionSpec} from '../../models/extensions/ui.js'\nimport {ThemeExtensionSpec} from '../../models/extensions/theme.js'\nimport {error, file, git, path, string, template, ui, environment} from '@shopify/cli-kit'\nimport {\n  addNPMDependenciesIfNeeded,\n  addResolutionOrOverride,\n  DependencyVersion,\n} from '@shopify/cli-kit/node/node-package-manager'\nimport {fileURLToPath} from 'url'\nimport stream from 'node:stream'\n\nasync function getTemplatePath(name: string): Promise<string> {\n  const templatePath = await path.findUp(`templates/${name}`, {\n    cwd: path.dirname(fileURLToPath(import.meta.url)),\n    type: 'directory',\n  })\n  if (templatePath) {\n    return templatePath\n  } else {\n    throw new error.Bug(`Couldn't find the template ${name} in @shopify/app.`)\n  }\n}\n\ninterface ExtensionInitOptions<TSpec extends GenericSpecification = GenericSpecification> {\n  name: string\n  app: AppInterface\n  cloneUrl?: string\n  extensionFlavor?: ExtensionFlavor\n  specification: TSpec\n  extensionType: string\n}\n\ninterface ExtensionDirectory {\n  extensionDirectory: string\n}\n\nexport type ExtensionFlavor = 'vanilla-js' | 'react' | 'typescript' | 'typescript-react'\n\ntype FunctionExtensionInitOptions = ExtensionInitOptions<FunctionSpec> & ExtensionDirectory\ntype UIExtensionInitOptions = ExtensionInitOptions<UIExtensionSpec> & ExtensionDirectory\ntype ThemeExtensionInitOptions = ExtensionInitOptions<ThemeExtensionSpec> & ExtensionDirectory\n\nasync function extensionInit(options: ExtensionInitOptions): Promise<string> {\n  const extensionDirectory = await ensureExtensionDirectoryExists({app: options.app, name: options.name})\n  switch (options.specification.category()) {\n    case 'theme':\n      await themeExtensionInit({...(options as ThemeExtensionInitOptions), extensionDirectory})\n      break\n    case 'function':\n      await functionExtensionInit({...(options as FunctionExtensionInitOptions), extensionDirectory})\n      break\n    case 'ui':\n      await uiExtensionInit({...(options as UIExtensionInitOptions), extensionDirectory})\n      break\n  }\n  return extensionDirectory\n}\n\nasync function themeExtensionInit({name, app, specification, extensionDirectory}: ThemeExtensionInitOptions) {\n  const templatePath = await getTemplatePath('theme-extension')\n  await template.recursiveDirectoryCopy(templatePath, extensionDirectory, {name, type: specification.identifier})\n}\n\nasync function uiExtensionInit({\n  name,\n  specification,\n  app,\n  extensionFlavor,\n  extensionDirectory,\n}: UIExtensionInitOptions) {\n  const list = ui.newListr(\n    [\n      {\n        title: 'Install additional dependencies',\n        task: async (_, task) => {\n          task.title = 'Installing additional dependencies...'\n          await addResolutionOrOverrideIfNeeded(app.directory, extensionFlavor)\n          const requiredDependencies = getRuntimeDependencies({specification, extensionFlavor})\n          await addNPMDependenciesIfNeeded(requiredDependencies, {\n            packageManager: app.packageManager,\n            type: 'prod',\n            directory: app.directory,\n            stderr: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n            stdout: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n          })\n          task.title = 'Dependencies installed'\n        },\n      },\n      {\n        title: `Generate ${specification.externalName} extension`,\n        task: async (_, task) => {\n          task.title = `Generating ${specification.externalName} extension...`\n\n          const templateDirectory = await path.findUp(\n            `templates/ui-extensions/projects/${specification.externalIdentifier}`,\n            {\n              type: 'directory',\n              cwd: path.moduleDirectory(import.meta.url),\n            },\n          )\n\n          if (!templateDirectory) {\n            throw new error.Bug(`Couldn't find the template for ${specification.externalIdentifier}`)\n          }\n\n          const srcFileExtension = getSrcFileExtension(extensionFlavor ?? 'vanilla-js')\n          await template.recursiveDirectoryCopy(templateDirectory, extensionDirectory, {\n            srcFileExtension,\n            flavor: extensionFlavor ?? '',\n            type: specification.identifier,\n            name,\n          })\n\n          if (extensionFlavor) {\n            await changeIndexFileExtension(extensionDirectory, srcFileExtension)\n            await removeUnwantedTemplateFilesPerFlavor(extensionDirectory, extensionFlavor)\n          }\n\n          task.title = `${specification.externalName} extension generated`\n        },\n      },\n    ],\n    {rendererSilent: environment.local.isUnitTest()},\n  )\n  await list.run()\n}\n\ntype SrcFileExtension = 'ts' | 'tsx' | 'js' | 'jsx'\nfunction getSrcFileExtension(extensionFlavor: ExtensionFlavor): SrcFileExtension {\n  const flavorToSrcFileExtension: {[key in ExtensionFlavor]: SrcFileExtension} = {\n    'vanilla-js': 'js',\n    react: 'jsx',\n    typescript: 'ts',\n    'typescript-react': 'tsx',\n  }\n\n  return flavorToSrcFileExtension[extensionFlavor]\n}\n\nexport function getRuntimeDependencies({\n  specification,\n  extensionFlavor,\n}: Pick<UIExtensionInitOptions, 'specification' | 'extensionFlavor'>): DependencyVersion[] {\n  const dependencies: DependencyVersion[] = []\n  if (extensionFlavor?.includes('react')) {\n    dependencies.push({name: 'react', version: versions.react})\n  }\n  const rendererDependency = specification.dependency\n  if (rendererDependency) {\n    dependencies.push(rendererDependency)\n  }\n  return dependencies\n}\n\nasync function changeIndexFileExtension(extensionDirectory: string, fileExtension: SrcFileExtension) {\n  const srcFilePaths = await path.glob(path.join(extensionDirectory, 'src', '*'))\n  const srcFileExensionsToChange = []\n\n  for (const srcFilePath of srcFilePaths) {\n    srcFileExensionsToChange.push(file.move(srcFilePath, `${srcFilePath}.${fileExtension}`))\n  }\n\n  await Promise.all(srcFileExensionsToChange)\n}\n\nasync function removeUnwantedTemplateFilesPerFlavor(extensionDirectory: string, extensionFlavor: ExtensionFlavor) {\n  // tsconfig.json file is only needed in extension folder to inform the IDE\n  // About the `react-jsx` tsconfig option, so IDE don't complain about missing react import\n  if (extensionFlavor !== 'typescript-react') {\n    await file.remove(path.join(extensionDirectory, 'tsconfig.json'))\n  }\n}\n\nasync function functionExtensionInit(options: FunctionExtensionInitOptions) {\n  const url = options.cloneUrl || blocks.functions.defaultUrl\n  const spec = options.specification\n  await file.inTemporaryDirectory(async (tmpDir) => {\n    const templateDownloadDir = path.join(tmpDir, 'download')\n\n    await ui.task({\n      title: `Generating ${spec.externalName} extension...`,\n      task: async () => {\n        await file.mkdir(templateDownloadDir)\n        await git.downloadRepository({\n          repoUrl: url,\n          destination: templateDownloadDir,\n          shallow: true,\n        })\n        const templatePath = spec.templatePath(options.extensionFlavor ?? blocks.functions.defaultLanguage)\n        const origin = path.join(templateDownloadDir, templatePath)\n        await template.recursiveDirectoryCopy(origin, options.extensionDirectory, options)\n        const configYamlPath = path.join(options.extensionDirectory, 'script.config.yml')\n        if (await file.exists(configYamlPath)) {\n          await file.remove(configYamlPath)\n        }\n        return {\n          successMessage: `${spec.externalName} extension generated`,\n        }\n      },\n    })\n  })\n}\n\nasync function ensureExtensionDirectoryExists({name, app}: {name: string; app: AppInterface}): Promise<string> {\n  const hyphenizedName = string.hyphenize(name)\n  const extensionDirectory = path.join(app.directory, blocks.extensions.directoryName, hyphenizedName)\n  if (await file.exists(extensionDirectory)) {\n    throw new error.Abort(\n      `\\nA directory with this name (${hyphenizedName}) already exists.\\nChoose a new name for your extension.`,\n    )\n  }\n  await file.mkdir(extensionDirectory)\n  return extensionDirectory\n}\n\nasync function addResolutionOrOverrideIfNeeded(directory: string, extensionFlavor?: ExtensionFlavor) {\n  if (extensionFlavor === 'typescript-react') {\n    await addResolutionOrOverride(directory, {'@types/react': versions.reactTypes})\n  }\n}\n\nexport default extensionInit\n"]}