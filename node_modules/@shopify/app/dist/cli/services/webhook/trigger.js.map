{"version":3,"file":"trigger.js","sourceRoot":"","sources":["../../../../src/cli/services/webhook/trigger.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,eAAe,EAAwB,MAAM,sBAAsB,CAAA;AAC3E,OAAO,EAAC,gBAAgB,EAAa,MAAM,qBAAqB,CAAA;AAChE,OAAO,EAAC,mBAAmB,EAAC,MAAM,4BAA4B,CAAA;AAC9D,OAAO,EAAC,MAAM,EAAC,MAAM,kBAAkB,CAAA;AAEvC;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,OAA8B;IACxE,MAAM,MAAM,GAAG,MAAM,gBAAgB,CACnC,OAAO,CAAC,KAAK,EACb,OAAO,CAAC,UAAU,EAClB,OAAO,CAAC,cAAc,EACtB,OAAO,CAAC,OAAO,EACf,OAAO,CAAC,YAAY,CACrB,CAAA;IAED,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;QACnB,MAAM,MAAM,CAAC,YAAY,CAAC,oBAAoB,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;QAChF,OAAM;KACP;IAED,IAAI,OAAO,CAAC,cAAc,KAAK,eAAe,CAAC,SAAS,EAAE;QACxD,MAAM,MAAM,GAAG,MAAM,mBAAmB,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,OAAO,CAAC,CAAA;QAE/F,IAAI,MAAM,EAAE;YACV,MAAM,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAA;YAC9C,OAAM;SACP;QAED,MAAM,MAAM,CAAC,YAAY,CAAC,2BAA2B,CAAC,CAAA;QACtD,OAAM;KACP;IAED,IAAI,MAAM,CAAC,aAAa,KAAK,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;QAC/C,MAAM,CAAC,OAAO,CAAC,wCAAwC,CAAC,CAAA;KACzD;AACH,CAAC;AACD,SAAS,YAAY,CAAC,MAAoB;IACxC,IAAI;QACF,OAAO,MAAM;aACV,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CACf,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;aACxB,GAAG,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,OAAO,GAAG,EAAE,CAAC;aAClC,IAAI,CAAC,IAAI,CAAC,CACd;aACA,IAAI,CAAC,IAAI,CAAC,CAAA;QACb,qDAAqD;KACtD;IAAC,OAAO,GAAG,EAAE;QACZ,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;KAC9B;AACH,CAAC","sourcesContent":["import {DELIVERY_METHOD, WebhookTriggerOptions} from './trigger-options.js'\nimport {getWebhookSample, UserErrors} from './request-sample.js'\nimport {triggerLocalWebhook} from './trigger-local-webhook.js'\nimport {output} from '@shopify/cli-kit'\n\n/**\n * Orchestrates the command request by requesting the sample and sending it to localhost if required.\n * It outputs the result in console\n *\n * @param options - Request options once the flags, prompts, and transformations have been performed\n */\nexport async function webhookTriggerService(options: WebhookTriggerOptions) {\n  const sample = await getWebhookSample(\n    options.topic,\n    options.apiVersion,\n    options.deliveryMethod,\n    options.address,\n    options.sharedSecret,\n  )\n\n  if (!sample.success) {\n    await output.consoleError(`Request errors:\\n${formatErrors(sample.userErrors)}`)\n    return\n  }\n\n  if (options.deliveryMethod === DELIVERY_METHOD.LOCALHOST) {\n    const result = await triggerLocalWebhook(options.address, sample.samplePayload, sample.headers)\n\n    if (result) {\n      output.success('Localhost delivery sucessful')\n      return\n    }\n\n    await output.consoleError('Localhost delivery failed')\n    return\n  }\n\n  if (sample.samplePayload === JSON.stringify({})) {\n    output.success('Webhook has been enqueued for delivery')\n  }\n}\nfunction formatErrors(errors: UserErrors[]): string {\n  try {\n    return errors\n      .map((element) =>\n        JSON.parse(element.message)\n          .map((msg: string) => `  Â· ${msg}`)\n          .join('\\n'),\n      )\n      .join('\\n')\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch (err) {\n    return JSON.stringify(errors)\n  }\n}\n"]}