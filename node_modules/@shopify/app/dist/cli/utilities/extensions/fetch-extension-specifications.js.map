{"version":3,"file":"fetch-extension-specifications.js","sourceRoot":"","sources":["../../../../src/cli/utilities/extensions/fetch-extension-specifications.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAE,mBAAmB,EAAC,MAAM,2CAA2C,CAAA;AAIrG,OAAO,EAAC,GAAG,EAAC,MAAM,kBAAkB,CAAA;AACpC,OAAO,EAAC,0BAA0B,EAAC,MAAM,+BAA+B,CAAA;AAKxE;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAAC,KAAa,EAAE,MAAc;IAC9E,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,4BAA4B,CAAA;IACtD,MAAM,MAAM,GAAmD,MAAM,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE;QACtG,OAAO,EAAE,MAAM;KAChB,CAAC,CAAA;IAEF,MAAM,uBAAuB,GAAmC,MAAM,CAAC,uBAAuB;SAC3F,MAAM,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,oBAAoB,KAAK,KAAK,CAAC;SAC/E,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACZ,MAAM,OAAO,GAAG,IAAoC,CAAA;QACpD,gGAAgG;QAChG,gGAAgG;QAChG,IAAI,IAAI,CAAC,UAAU,KAAK,qBAAqB;YAAE,IAAI,CAAC,UAAU,GAAG,OAAO,CAAA;QACxE,IAAI,IAAI,CAAC,UAAU,KAAK,yBAAyB;YAAE,IAAI,CAAC,UAAU,GAAG,sBAAsB,CAAA;QAC3F,OAAO,CAAC,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAA;QAC1D,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAA;QAC9C,OAAO,OAAO,CAAA;IAChB,CAAC,CAAC,CAAA;IAEJ,MAAM,EAAE,GAAG,MAAM,mBAAmB,EAAE,CAAA;IACtC,MAAM,KAAK,GAAG,MAAM,sBAAsB,EAAE,CAAA;IAC5C,MAAM,KAAK,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,KAAK,CAAC,CAAA;IAE/B,OAAO,wBAAwB,CAAC,KAAK,EAAE,uBAAuB,CAAC,CAAA;AACjE,CAAC;AAED,SAAS,wBAAwB,CAC/B,KAAsB,EACtB,MAAsC;IAEtC,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACjC,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC,UAAU,CAAC,CAAA;QACjF,IAAI,UAAU;YAAE,OAAO,EAAC,GAAG,IAAI,EAAE,GAAG,UAAU,EAAC,CAAA;QAC/C,OAAO,SAAS,CAAA;IAClB,CAAC,CAAC,CAAA;IAEF,OAAO,0BAA0B,CAAuB,OAAO,CAAC,CAAA;AAClE,CAAC","sourcesContent":["import {allThemeSpecifications, allUISpecifications} from '../../models/extensions/specifications.js'\nimport {UIExtensionSpec} from '../../models/extensions/ui.js'\nimport {ThemeExtensionSpec} from '../../models/extensions/theme.js'\nimport {GenericSpecification} from '../../models/app/extensions.js'\nimport {api} from '@shopify/cli-kit'\nimport {getArrayRejectingUndefined} from '@shopify/cli-kit/common/array'\nimport {FlattenedRemoteSpecification} from '@shopify/cli-kit/src/api/graphql/extension_specifications.js'\n\ntype ExtensionSpec = UIExtensionSpec | ThemeExtensionSpec\n\n/**\n * Fetch all extension specifications the user has access to\n * Will return a merge of the local and remote specs (remote values override local ones)\n * Will only return the specifications that are also defined locally\n * @param token - Token to access partners API\n * @returns List of extension specifications\n */\nexport async function fetchExtensionSpecifications(token: string, apiKey: string): Promise<GenericSpecification[]> {\n  const query = api.graphql.ExtensionSpecificationsQuery\n  const result: api.graphql.ExtensionSpecificationsQuerySchema = await api.partners.request(query, token, {\n    api_key: apiKey,\n  })\n\n  const extensionSpecifications: FlattenedRemoteSpecification[] = result.extensionSpecifications\n    .filter((specification) => specification.options.managementExperience === 'cli')\n    .map((spec) => {\n      const newSpec = spec as FlattenedRemoteSpecification\n      // WORKAROUND: The identifiers in the API are different for these extensions to the ones the CLI\n      // has been using so far. This is a workaround to keep the CLI working until the API is updated.\n      if (spec.identifier === 'theme_app_extension') spec.identifier = 'theme'\n      if (spec.identifier === 'subscription_management') spec.identifier = 'product_subscription'\n      newSpec.registrationLimit = spec.options.registrationLimit\n      newSpec.surface = spec.features?.argo?.surface\n      return newSpec\n    })\n\n  const ui = await allUISpecifications()\n  const theme = await allThemeSpecifications()\n  const local = [...ui, ...theme]\n\n  return mergeLocalAndRemoteSpecs(local, extensionSpecifications)\n}\n\nfunction mergeLocalAndRemoteSpecs(\n  local: ExtensionSpec[],\n  remote: FlattenedRemoteSpecification[],\n): GenericSpecification[] {\n  const updated = local.map((spec) => {\n    const remoteSpec = remote.find((remote) => remote.identifier === spec.identifier)\n    if (remoteSpec) return {...spec, ...remoteSpec}\n    return undefined\n  })\n\n  return getArrayRejectingUndefined<GenericSpecification>(updated)\n}\n"]}